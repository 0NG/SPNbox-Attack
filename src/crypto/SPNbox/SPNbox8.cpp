#include "SPNbox8.h"
#include "../AES/AES128_ni.h"
#include "../GF/GF28.h"
#include <iostream>
using namespace std;

#include <cstring>

SPNboxKey::SPNboxKey(unsigned char key[16]) { generateBox(key); }

inline void SPNboxKey::generateRndStream(unsigned char rndStream[256 * 16 * 3], unsigned char key[16])
{
    AESKey aesKey(key);
    AES& aesHandler = AES::instance();
    unsigned char counter[16];
    memset(counter, 0x00, 16);
    for (int i = 0; i < 256 * 3; ++i) {
        counter[14] = (i >> 8) & 0xff;
        counter[15] = i & 0xff;

        aesHandler.AESEncrypt(rndStream, counter, aesKey, 10);

        rndStream += 16;
    }
    return;
}

void SPNboxKey::generateBox(unsigned char key[16])
{
    unsigned char rndStream[256 * 16 * 3];
    generateRndStream(rndStream, key);

    int rndIndex = 0;
    for (int i = 0; i < 256; ++i) sbox[i] = i;

    for (int i = 256 - 1; i >= 0; --i) {
        int j = rndStream[rndIndex++] % (i + 1);
        int tmp = sbox[i];
        sbox[i] = sbox[j];
        sbox[j] = tmp;
    }

    for (int i = 0; i < 256; ++i)
        invsbox[sbox[i]] = i;
    return;
}

SPNbox& SPNbox::instance()
{
    static SPNbox SPNboxINSTANCE;
    return SPNboxINSTANCE;
}

void SPNbox::SLayer(unsigned char text[16], const unsigned char sbox[256])
{
    for (int i = 0; i < 16; ++i)
        text[i] = sbox[text[i]];
    return;
}

void SPNbox::invSLayer(unsigned char text[16], const unsigned char invsbox[256])
{
    for (int i = 0; i < 16; ++i)
        text[i] = invsbox[text[i]];
    return;
}

static void MC(unsigned char text[16])
{
    constexpr unsigned char M8[16][16] =  {
        { 0x08, 0x16, 0x8a, 0x01, 0x70, 0x8d, 0x24, 0x76, 0xa8, 0x91, 0xad, 0x48, 0x05, 0xb5, 0xaf, 0xf8 },
        { 0x16, 0x08, 0x01, 0x8a, 0x8d, 0x70, 0x76, 0x24, 0x91, 0xa8, 0x48, 0xad, 0xb5, 0x05, 0xf8, 0xaf },
        { 0x8a, 0x01, 0x08, 0x16, 0x24, 0x76, 0x70, 0x8d, 0xad, 0x48, 0xa8, 0x91, 0xaf, 0xf8, 0x05, 0xb5 },
        { 0x01, 0x8a, 0x16, 0x08, 0x76, 0x24, 0x8d, 0x70, 0x48, 0xad, 0x91, 0xa8, 0xf8, 0xaf, 0xb5, 0x05 },
        { 0x70, 0x8d, 0x24, 0x76, 0x08, 0x16, 0x8a, 0x01, 0x05, 0xb5, 0xaf, 0xf8, 0xa8, 0x91, 0xad, 0x48 },
        { 0x8d, 0x70, 0x76, 0x24, 0x16, 0x08, 0x01, 0x8a, 0xb5, 0x05, 0xf8, 0xaf, 0x91, 0xa8, 0x48, 0xad },
        { 0x24, 0x76, 0x70, 0x8d, 0x8a, 0x01, 0x08, 0x16, 0xaf, 0xf8, 0x05, 0xb5, 0xad, 0x48, 0xa8, 0x91 },
        { 0x76, 0x24, 0x8d, 0x70, 0x01, 0x8a, 0x16, 0x08, 0xf8, 0xaf, 0xb5, 0x05, 0x48, 0xad, 0x91, 0xa8 },
        { 0xa8, 0x91, 0xad, 0x48, 0x05, 0xb5, 0xaf, 0xf8, 0x08, 0x16, 0x8a, 0x01, 0x70, 0x8d, 0x24, 0x76 },
        { 0x91, 0xa8, 0x48, 0xad, 0xb5, 0x05, 0xf8, 0xaf, 0x16, 0x08, 0x01, 0x8a, 0x8d, 0x70, 0x76, 0x24 },
        { 0xad, 0x48, 0xa8, 0x91, 0xaf, 0xf8, 0x05, 0xb5, 0x8a, 0x01, 0x08, 0x16, 0x24, 0x76, 0x70, 0x8d },
        { 0x48, 0xad, 0x91, 0xa8, 0xf8, 0xaf, 0xb5, 0x05, 0x01, 0x8a, 0x16, 0x08, 0x76, 0x24, 0x8d, 0x70 },
        { 0x05, 0xb5, 0xaf, 0xf8, 0xa8, 0x91, 0xad, 0x48, 0x70, 0x8d, 0x24, 0x76, 0x08, 0x16, 0x8a, 0x01 },
        { 0xb5, 0x05, 0xf8, 0xaf, 0x91, 0xa8, 0x48, 0xad, 0x8d, 0x70, 0x76, 0x24, 0x16, 0x08, 0x01, 0x8a },
        { 0xaf, 0xf8, 0x05, 0xb5, 0xad, 0x48, 0xa8, 0x91, 0x24, 0x76, 0x70, 0x8d, 0x8a, 0x01, 0x08, 0x16 },
        { 0xf8, 0xaf, 0xb5, 0x05, 0x48, 0xad, 0x91, 0xa8, 0x76, 0x24, 0x8d, 0x70, 0x01, 0x8a, 0x16, 0x08 }
    };
    unsigned char tmp[16];
    for (int i = 0; i < 16; ++i) {
        tmp[i] = 0x00;
        for (int j = 0; j < 16; ++j) {
            tmp[i] ^= GF28::mul(M8[i][j], text[j]);
        }
    }

    memcpy(text, tmp, 16);
    return;
}

void SPNbox::PLayer(unsigned char text[16], unsigned char c)
{
    MC(text);

    for (int i = 0; i < 16; ++i) {
        text[i] ^= c;
        ++c;
    }
    return;
}

void SPNbox::invPLayer(unsigned char text[16], unsigned char c)
{
    for (int i = 0; i < 16; ++i) {
        text[i] ^= c;
        ++c;
    }
    MC(text);
    return;
}

void SPNbox::SPNboxEncrypt(unsigned char ciphertext[16], const unsigned char plaintext[16], const SPNboxKey key)
{
    memcpy(ciphertext, plaintext, 16);
    SPNbox::SLayer(ciphertext, key.sbox);
    SPNbox::PLayer(ciphertext, 0);
    SPNbox::SLayer(ciphertext, key.sbox);
    SPNbox::PLayer(ciphertext, 16);
    SPNbox::SLayer(ciphertext, key.sbox);
    return;
}

void SPNbox::SPNboxDecrypt(unsigned char plaintext[16], const unsigned char ciphertext[16], const SPNboxKey key)
{
    memcpy(plaintext, ciphertext, 16);
    SPNbox::invSLayer(plaintext, key.invsbox);
    SPNbox::invPLayer(plaintext, 16);
    SPNbox::invSLayer(plaintext, key.invsbox);
    SPNbox::invPLayer(plaintext, 0);
    SPNbox::invSLayer(plaintext, key.invsbox);
    return;
}
